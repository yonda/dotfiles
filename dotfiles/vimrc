set nocompatible

filetype off
filetype plugin indent off

"-----------------------------------------------------------------------------
" NeoBundler
"-----------------------------------------------------------------------------
" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

if has('vim_starting')
if &compatible
    set nocompatible
  endif

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

"""""""""""""""""""""""""""""
" Ruby向けにendを自動挿入してくれる
NeoBundle 'tpope/vim-endwise'
"""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
NeoBundle 'Shougo/vimproc.vim', {
\  'build' : {
\    'windows' : 'make -f make_mingw32.mak',
\    'cygwin' : 'make -f make_cygwin.mak',
\    'mac' : 'make -f make_mac.mak',
\    'unix' : 'make -f make_unix.mak',
\  },
\}
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
NeoBundle 'szw/vim-tags'
let g:vim_tags_project_tags_command = "/usr/local/Cellar/ctags/5.8/bin/ctags -f .tags -R . 2>/dev/null"
let g:vim_tags_gems_tags_command = "/usr/local/Cellar/ctags/5.8/bin/ctags -R -f .Gemfile.lock.tags `bundle show --paths` 2>/dev/null"
set tags+=.tags
set tags+=.Gemfile.lock.tags
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
NeoBundle 'thinca/vim-quickrun'

let g:quickrun_config = {}
let g:quickrun_config._ = { 'runner' : 'vimproc' }
let g:quickrun_config['ruby.rspec'] = { 'command': 'rspec','cmdopt': 'bundle exec', 'exec': '%o %c %s'}
augroup RSpec
  autocmd!
  autocmd BufWinEnter,BufNewFile *_spec.rb set filetype=ruby.rspec
augroup END
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" vim-quickrun で実行する rspec を色付きにする
NeoBundle 'vim-scripts/AnsiEsc.vim'
augroup quickrun
  autocmd!
  autocmd FileType quickrun AnsiEsc
augroup END
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
NeoBundle 'soramugi/auto-ctags.vim'
let g:auto_ctags = 1
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
NeoBundle 'git@github.com:Shougo/vimshell.vim.git'
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" syntacs のチェックを行う
NeoBundle 'scrooloose/syntastic'

" rubocop のチェックを行う
let g:syntastic_mode_map = { 'mode': 'passive', 'passive_filetypes': ['ruby'] }
let g:syntastic_ruby_checkers = ['rubocop']

nnoremap <Space>sc :SyntasticCheck<Enter>
""""""""""""""""""""""""""""""
" Unit.vim の設定
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neomru.vim'

" Unite.vim を利用するときにインサートモードで開始する
let g:unite_enable_start_insert=1

" 不要ファイルを無視する
let s:unite_ignore_patterns='\(.\(gif\|jpe\?g\|png\|webp\|xml\)$\|vendor\)'

" バッファ一覧
noremap <Space>ub :Unite buffer<CR>
" ファイル一覧
"noremap <Space>uf :Unite file_rec/git<CR>
" 最近使ったファイルの一覧
noremap <Space>uz :Unite file_mru<CR>
""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""
NeoBundle "ctrlpvim/ctrlp.vim"
""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""
" NERDTree
" ファイルをtree表示してくれる
NeoBundle 'scrooloose/nerdtree'

" NERDTree のショートカット
" " Ctrl + e でディレクトリ表示
nnoremap <silent><C-e> :NERDTreeToggle<CR>

" 隠しファイルをデフォルトで表示させる
let NERDTreeShowHidden = 1

" デフォルトでツリーを表示させる
" autocmd VimEnter * execute 'NERDTree'
"""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""
" Gitを便利に使う
" fugitive の設定
NeoBundle 'tpope/vim-fugitive'

" ステータス行に現在のgitブランチを表示する
" set statusline+=%{fugitive#statusline()}

" git blame のショートカット
nnoremap <Space>gb :<C-u>Gblame<Enter>

nnoremap <Space>gs :<C-u>Gstatus<Enter>
nnoremap <Space>gd :<C-u>Gdiff<Enter>
" nnoremap <Space>gl :<C-u>Glog<Enter>
nnoremap <Space>ga :<C-u>Gwrite<Enter>
nnoremap <Space>gc :<C-u>Gcommit -v<Enter>
" nnoremap <Space>gC :<C-u>Git commit --amend<Enter>
"""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""
NeoBundle 'git@github.com:gregsexton/gitv.git'
" gitvでDiffが折りたたまれて表示される問題の対策
autocmd FileType git :setlocal foldlevel=99

autocmd FileType gitv call s:my_gitv_settings()
function! s:my_gitv_settings()
  setlocal iskeyword+=/,-,.
  nnoremap <silent><buffer> C :<C-u>Git checkout <C-r><C-w><CR>
endfunction
"""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""
" Rails向けのコマンドを提供する
NeoBundle 'tpope/vim-rails'

" View と Controller を切り替える
nnoremap <Space>rr :R<CR>
nnoremap <Space>rs :RS<CR>
nnoremap <Space>rv :RV<CR>
" テストとプロダクトを切り替える
nnoremap <Space>aa :A<CR>
nnoremap <Space>as :AS<CR>
nnoremap <Space>av :AV<CR>
" nnoremap <Space>m :Rmodel<Space>
" nnoremap <Space>c :Rcontroller<Space>
" nnoremap <Space>v :Rview<Space>
" nnoremap <buffer><Space>p :Rpreview<CR>
"""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""
NeoBundle 'https://github.com/basyura/unite-rails'
nnoremap <Space>v  :<C-U>Unite rails/view<CR>
nnoremap <Space>m  :<C-U>Unite rails/model<CR>
nnoremap <Space>c  :<C-U>Unite rails/controller<CR>
nnoremap <Space>s  :<C-U>Unite rails/spec<CR>
nnoremap <Space>f  :<C-U>Unite rails/config<CR>
nnoremap <Space>bi  :<C-U>Unite rails/bundle<CR>
"""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""
" コメントアウト用の plugin
NeoBundle 'scrooloose/nerdcommenter'
let NERDSpaceDelims = 1
" cc でコメントアウト
nmap cc <Plug>NERDCommenterToggle
vmap cc <Plug>NERDCommenterToggle
"""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""
" 行末の半角スペースを可視化
NeoBundle 'bronson/vim-trailing-whitespace'
"""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""
" 入力補完
NeoBundle 'Shougo/neocomplete.vim'

" Disable AutoComplPop.
let g:acp_enableAtStartup = 0

" Use neocomplete.
let g:neocomplete#enable_at_startup = 1

" Use smartcase.
let g:neocomplete#enable_smart_case = 1

" Set minimum syntax keyword length.
let g:neocomplete#min_syntax_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#dictionary_filetype_lists = { 'default' : '' }

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#smart_close_popup() . "\<CR>"
endfunction

" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
"""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""
" Memo 用 の plugin
NeoBundle 'glidenote/memolist.vim'

let g:memolist_path = expand('~/memolist')
let g:memolist_gfixgrep = 1
let g:memolist_unite = 1
let g:memolist_unite_option = "-vertical -start-insert"

nnoremap mn  :MemoNew<CR>
nnoremap ml  :MemoList<CR>
nnoremap mg  :MemoGrep<CR>
"""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""
NeoBundleLazy 'lambdalisue/unite-grep-vcs', {
    \ 'autoload': {
    \    'unite_sources': ['grep/git', 'grep/hg'],
    \}}

noremap <Space>gl :Unite grep/git:.<CR>
"""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""
" colorschme を確認する
" Usage :Unite -auto-preview colorscheme
NeoBundle 'unite-colorscheme'
"""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""
" color
NeoBundle 'mrkn/mrkn256.vim'
NeoBundle 'guicolorscheme.vim'
NeoBundle 'wombat256.vim'
NeoBundle 'vividchalk.vim'
NeoBundle 'xoria256.vim'
NeoBundle 'Lucius'
NeoBundle 'chriskempson/vim-tomorrow-theme'
NeoBundle 'w0ng/vim-hybrid'
"""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""
" easymotion
NeoBundle 'Lokaltog/vim-easymotion'
" http://blog.remora.cx/2012/08/vim-easymotion.html
" ホームポジションに近いキーを使う
" let g:EasyMotion_keys='hsdfgyuiopqwertnmzxcvb'
" 「;」 + 何かにマッピング
" let g:EasyMotion_leader_key=";"
" 1 ストローク選択を優先する
" let g:EasyMotion_grouping=1
" カラー設定変更
" hi EasyMotionTarget ctermbg=none ctermfg=red
" hi EasyMotionShade  ctermbg=none ctermfg=blue
"""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""
NeoBundleLazy 'jelera/vim-javascript-syntax', {'autoload':{'filetypes':['javascript']}}
NeoBundle 'pangloss/vim-javascript'
"""""""""""""""""""""""""""""

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck
"-----------------------------------------------------------------------------

"-----------------------------------------------------------------------------
" vim default

set noswapfile
set nohlsearch
set noincsearch
set number
set showcmd
" 対応する括弧やブレースを表示する
set showmatch
" 検索時に大文字小文字を区別しない
set smartcase
" 検索がファイル末尾まで進んだら、ファイル先頭から再び検索する。
set wrapscan

set shiftwidth=4
set tabstop=4

" jj, jk でモードきりかえ
inoremap <silent> jj <ESC>
inoremap <silent> jk <ESC>
" default な挙動だが、statusline の色を変えるために設定している
inoremap <silent> <C-c> <ESC>

nnoremap <silent><Space>b :b#<CR>

nnoremap <silent>ss :sp<CR>
nnoremap <silent>vs :vs<CR>

nnoremap <silent>vs :vs<CR>
" ノーマルモードでは ; を : として扱う
nnoremap ; :
"
" tagsジャンプの時に複数ある時は一覧表示
nnoremap <C-]> g<C-]>

" 挿入モードでのカーソル移動(vim like)
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-h> <Left>
inoremap <C-l> <Right>

" 挿入モードでのカーソル移動(emacs like)
" inoremap <C-n> <Down>
" inoremap <C-p> <Up>
" inoremap <C-b> <Left>
" inoremap <C-f> <Right>

"status line を常に表示する
set laststatus=2

set statusline=%f%m%=%l,%c\ %{'['.(&fenc!=''?&fenc:&enc).']\ ['.&fileformat.']'}
" ステータス行に現在のgitブランチを表示する
set statusline+=%{fugitive#statusline()}

" ウインドウのタイトルバーにファイルのパス情報等を表示する
set title
" コマンドラインモードで<Tab>キーによるファイル名補完を有効にする
set wildmenu

" カーソルが何行目の何列目に置かれているかを表示する
set ruler

" スプリット時に下にカーソルを移す
set splitbelow
" スプリット時に右にカーソルを移す
set splitright

" 勝手にインデントさせない
set formatoptions=q

" 大文字小文字は区別しない
set ignorecase

hi DiffAdd    ctermfg=black ctermbg=2
hi DiffChange ctermfg=black ctermbg=3
hi DiffDelete ctermfg=black ctermbg=6
hi DiffText   ctermfg=black ctermbg=7

""""""""""""""""""""""""""""""
" https://sites.google.com/site/fudist/Home/vim-nihongo-ban/-vimrc-sample
" 挿入モード時、ステータスラインの色を変更
""""""""""""""""""""""""""""""
let g:hi_insert = 'highlight StatusLine guifg=darkblue guibg=darkyellow gui=none ctermfg=blue ctermbg=yellow cterm=none'

if has('syntax')
  augroup InsertHook
    autocmd!
    autocmd InsertEnter * call s:StatusLine('Enter')
    autocmd InsertLeave * call s:StatusLine('Leave')
  augroup END
endif

let s:slhlcmd = ''

function! s:StatusLine(mode)
  if a:mode == 'Enter'
    silent! let s:slhlcmd = 'highlight ' . s:GetHighlight('StatusLine')
    silent exec g:hi_insert
  else
    highlight clear StatusLine
    silent exec s:slhlcmd
  endif
endfunction

function! s:GetHighlight(hi)
  redir => hl
  exec 'highlight '.a:hi
  redir END
  let hl = substitute(hl, '[\r\n]', '', 'g')
  let hl = substitute(hl, 'xxx', '', '')
  return hl
endfunction
""""""""""""""""""""""""""""""

call unite#custom#source('file_rec/async', 'ignore_pattern', s:unite_ignore_patterns)
call unite#custom#source('file_rec/git', 'ignore_pattern', s:unite_ignore_patterns)
call unite#custom#source('file_rec', 'ignore_pattern', s:unite_ignore_patterns)

"-----------------------------------------------------------------------------
" FileType ごとの設定
"-----------------------------------------------------------------------------
au FileType ruby        :set nowrap tabstop=2 tw=0 sw=2 expandtab commentstring=#\ %s
au FileType cucumber    :set nowrap tabstop=2 tw=2 sw=2 expandtab
au FileType haml        :set nowrap tabstop=2 tw=2 sw=2 expandtab
au FileType sass        :set nowrap tabstop=2 tw=2 sw=2 expandtab
au FileType html        :set nowrap tabstop=2 tw=2 sw=2 expandtab
" au FileType coffee      :set nowrap tabstop=2 tw=2 sw=2 expandtab
au FileType Gemfile     :set nowrap tabstop=2 tw=2 sw=2 expandtab
" au FileType javascript  :set nowrap tabstop=2 tw=2 sw=2 expandtab
autocmd filetype coffee,javascript setlocal shiftwidth=2 softtabstop=2 tabstop=2 expandtab

syntax on
