if [ -z $TMUX ]; then
  export PATH=/usr/local:$PATH
  export PATH=/usr/local/bin:$PATH
  export PATH=$HOME/.nodebrew/current/bin:$PATH
  export PATH="/usr/local/opt/mysql@5.6/bin:$PATH"
  export PATH="/usr/local/var/rbenv:$PATH"
  # export NODE_PATH="$HOME/.nvm/versions/node/v6.7.0/lib/node_modules"
  # postgresql
  export PGDATA=/usr/local/var/postgres
  # go
  export GOPATH=$HOME/.go
  export PATH=$PATH:$HOME/.go/bin
  export ANDROID_HOME=“/usr/local/share/android-sdk”
  export PATH=“${PATH}:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools”
fi

export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init - --no-rehash)"

# nvm
if [[ -s ~/.nvm/nvm.sh ]];
 then source ~/.nvm/nvm.sh
fi

# env
export EDITOR=nvim
eval "$(direnv hook zsh)"

# aliases
alias ls="ls -FG"
alias la='ls -al'
alias b='bundle'
alias bo='bundle open'
alias bc='bundle console'
alias be='bundle exec'
alias bi='bundle install'
alias bo='bundle open'
alias bu='bundle update'
alias g='git'
alias gl='git lo'
alias gh='git hf'

alias vim=nvim

alias dd='pretty-diff'
alias sf='swift'

alias va='vagrant'
alias rs='spring rspec'
alias rs='rails c'

alias t='todoist'
alias tl='todoist l'
alias ta='todoist a'
alias ta='todoist s'
alias tc='peco-todoist-close'

# ## incremental
alias e='ghq list -p | p cd'
alias show='git browse'
alias ho='ghq list -p | p pushd >/dev/null; hub browse; popd >/dev/null'

alias fe='nvim `git ls-files | peco`'
alias srs="git status -s | grep spec | peco | awk 'match(\$0, /spec.*/) { print substr(\$0, RSTART, RLENGTH)}' | xargs bundle exec rspec"
alias no='ghn list | peco | xargs open'

# kill kav
alias korosu='ps -ef | pgrep kav | sudo xargs kill -9'

# HISTFILE
HISTFILE=~/.zsh_history
HISTSIZE=100000
SAVEHIST=100000

# bindkey
bindkey -e

# prompt
setopt prompt_subst
autoload colors; colors

autoload -Uz colors
colors
autoload -Uz add-zsh-hook

function p() { peco | while read LINE; do $@ $LINE; done }

function peco-history-selection() {
	local tac
	if which tac > /dev/null; then
		tac="tac"
	else
		tac="tail -r"
	fi
	BUFFER=$(\history -n 1 | \
		eval $tac | \
		peco --query "$LBUFFER")
	CURSOR=$#BUFFER
	zle clear-screen
}

zle -N peco-history-selection
bindkey '^R' peco-history-selection

# 大文字小文字を区別しない
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# for vcs_info
autoload -Uz vcs_info
precmd () { vcs_info }

zstyle ':vcs_info:git:*' formats "%b" "%s"
zstyle ':vcs_info:git:*' actionformats "%b|%a" "%s"

function vcs_info_for_git() {
  VCS_GIT_PROMPT="${vcs_info_msg_0_}"
  VCS_GIT_PROMPT_CLEAN="%{${fg[green]}%}"
  VCS_GIT_PROMPT_DIRTY="%{${fg[yellow]}%}"

  VCS_GIT_PROMPT_ADDED="%{${fg[cyan]}%}A%{${reset_color}%}"
  VCS_GIT_PROMPT_MODIFIED="%{${fg[yellow]}%}M%{${reset_color}%}"
  VCS_GIT_PROMPT_DELETED="%{${fg[red]}%}D%{${reset_color}%}"
  VCS_GIT_PROMPT_RENAMED="%{${fg[blue]}%}R%{${reset_color}%}"
  VCS_GIT_PROMPT_UNMERGED="%{${fg[magenta]}%}U%{${reset_color}%}"
  VCS_GIT_PROMPT_UNTRACKED="%{${fg[red]}%}?%{${reset_color}%}"

  INDEX=$(git status --porcelain 2> /dev/null)
  if [[ -z "$INDEX" ]];then
	STATUS="${VCS_GIT_PROMPT_CLEAN}${VCS_GIT_PROMPT}%{${reset_color}%}"
  else
	STATUS=" ${VCS_GIT_PROMPT_DIRTY}${VCS_GIT_PROMPT}%{${reset_color}%}"
	if $(echo "$INDEX" | grep '^UU ' &> /dev/null); then
	  STATUS="$VCS_GIT_PROMPT_UNMERGED$STATUS"
	fi
	if $(echo "$INDEX" | grep '^R ' &> /dev/null); then
	  STATUS="$VCS_GIT_PROMPT_RENAMED$STATUS"
	fi
	if $(echo "$INDEX" | grep '^ D ' &> /dev/null); then
	  STATUS="$VCS_GIT_PROMPT_DELETED$STATUS"
	fi
	if $(echo "$INDEX" | grep '^?? ' &> /dev/null); then
	  STATUS="$VCS_GIT_PROMPT_UNTRACKED$STATUS"
	fi
	if $(echo "$INDEX" | grep '^ M ' &> /dev/null); then
	  STATUS="$VCS_GIT_PROMPT_MODIFIED$STATUS"
	fi
	if $(echo "$INDEX" | grep '^A ' &> /dev/null); then
	  STATUS="$VCS_GIT_PROMPT_ADDED$STATUS"
	elif $(echo "$INDEX" | grep '^M ' &> /dev/null); then
	  STATUS="$VCS_GIT_PROMPT_ADDED$STATUS"
	fi
  fi
  echo "${STATUS}"
}

function vcs_info_with_color() {
  VCS_PROMPT_PREFIX="%{${fg[green]}%}[%{${reset_color}%}"
  VCS_PROMPT_SUFFIX="%{${fg[green]}%}]%{${reset_color}%}"

  VCS_NOT_GIT_PROMPT="%{${fg[green]}%}${vcs_info_msg_0_}%{${reset_color}%}"

  if [[ -n "${vcs_info_msg_0_}" ]]; then
	if [[ "${vcs_info_msg_1_}" = "git" ]]; then
	  STATUS=$(vcs_info_for_git)
	else
	  STATUS=${VCS_NOT_GIT_PROMPT}
	fi
	echo " ${VCS_PROMPT_PREFIX}${STATUS}${VCS_PROMPT_SUFFIX}"
  fi
}

PROMPT=$'%{$fg[red]%}@%n %{$fg[cyan]%}%~ $(vcs_info_with_color)   \n %{${fg[yellow]}%}$%{${reset_color}%} '
RPROMPT=''

function git(){hub "$@"}

fpath=($(brew --prefix)/share/zsh/site-functions $fpath)

autoload -U compinit
compinit -u

zshaddhistory() {
	local line=${1%%$'\n'}
	local cmd=${line%% *}

	# 以下の条件をすべて満たすものだけをヒストリに追加する
	[[ ${#line} -ge 2 ]]
}
typeset -U path PATH

# if (which zprof > /dev/null 2>&1) ;then
  # zprof
# fi

export DOCKER_TLS_VERIFY="1"
export DOCKER_HOST="tcp://192.168.99.100:2376"
export DOCKER_CERT_PATH="/Users/honda/.docker/machine/machines/dev"
export DOCKER_MACHINE_NAME="dev"
# Run this command to configure your shell: 
# eval $(docker-machine env dev)
